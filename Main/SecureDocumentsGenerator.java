/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Main;

import Crypto.Abstraction.*;
import Crypto.Impl.Cle.CleCaesar;
import Crypto.Impl.Cle.ClePolyAlberti;
import Crypto.Impl.Cle.MatrixKey;
import java.awt.CardLayout;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Aurélien Bolkaerts
 */
public class SecureDocumentsGenerator extends javax.swing.JFrame {
    Chiffrement chiffrement = (Chiffrement) CryptoManager.newInstance("TriumviratPrior");
    Cle cle;
    /**
     * Creates new form TwoTextFrame
     */
    public SecureDocumentsGenerator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        ActioBG = new javax.swing.ButtonGroup();
        MethodBG = new javax.swing.ButtonGroup();
        OpenButton = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        InputTP = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        OutputTP = new javax.swing.JTextPane();
        OptionPanel = new javax.swing.JPanel();
        ModePanel = new javax.swing.JPanel();
        EncryptRB = new javax.swing.JRadioButton();
        UncryptRB = new javax.swing.JRadioButton();
        TypePanel = new javax.swing.JPanel();
        CaesarRB = new javax.swing.JRadioButton();
        AlbertiRB = new javax.swing.JRadioButton();
        HillRB = new javax.swing.JRadioButton();
        KeyPanel = new javax.swing.JPanel();
        CaesarPanel = new javax.swing.JPanel();
        DecalageLabel = new javax.swing.JLabel();
        DecalageSpinner = new javax.swing.JSpinner();
        AlbertiPanel = new javax.swing.JPanel();
        CalageLabel = new javax.swing.JLabel();
        CalageTF = new javax.swing.JTextField();
        FrequenceLabel = new javax.swing.JLabel();
        FrequenceSpinner = new javax.swing.JSpinner();
        HillPanel = new javax.swing.JPanel();
        MatricePanel = new javax.swing.JPanel();
        Matrice00Spinner = new javax.swing.JSpinner();
        Matrice01Spinner = new javax.swing.JSpinner();
        Matrice10Spinner = new javax.swing.JSpinner();
        Matrice11Spinner = new javax.swing.JSpinner();
        GoButton = new javax.swing.JButton();
        PanelAction = new javax.swing.JPanel();
        GenerateKeyBt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Secure Documents Generator");
        setMinimumSize(new java.awt.Dimension(955, 300));
        setResizable(false);
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 20, 0, 20, 0, 20, 0};
        layout.rowHeights = new int[] {0, 10, 0, 10, 0};
        getContentPane().setLayout(layout);

        OpenButton.setText("Ouvrir");
        OpenButton.setMargin(new java.awt.Insets(5, 5, 5, 5));
        OpenButton.setMaximumSize(new java.awt.Dimension(100, 25));
        OpenButton.setMinimumSize(new java.awt.Dimension(100, 25));
        OpenButton.setPreferredSize(new java.awt.Dimension(100, 25));
        OpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        getContentPane().add(OpenButton, gridBagConstraints);

        SaveButton.setText("Enregistrer dans");
        SaveButton.setMargin(new java.awt.Insets(5, 5, 5, 5));
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        getContentPane().add(SaveButton, gridBagConstraints);

        InputTP.setMaximumSize(new java.awt.Dimension(400, 200));
        InputTP.setMinimumSize(new java.awt.Dimension(400, 200));
        InputTP.setPreferredSize(new java.awt.Dimension(400, 200));
        jScrollPane1.setViewportView(InputTP);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        OutputTP.setEditable(false);
        OutputTP.setMaximumSize(new java.awt.Dimension(400, 200));
        OutputTP.setMinimumSize(new java.awt.Dimension(400, 200));
        OutputTP.setPreferredSize(new java.awt.Dimension(400, 200));
        jScrollPane2.setViewportView(OutputTP);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jScrollPane2, gridBagConstraints);

        OptionPanel.setLayout(new javax.swing.BoxLayout(OptionPanel, javax.swing.BoxLayout.LINE_AXIS));

        ModePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Mode"));
        ModePanel.setLayout(new javax.swing.BoxLayout(ModePanel, javax.swing.BoxLayout.Y_AXIS));

        ActioBG.add(EncryptRB);
        EncryptRB.setSelected(true);
        EncryptRB.setText("Chiffrement");
        ModePanel.add(EncryptRB);

        ActioBG.add(UncryptRB);
        UncryptRB.setText("Déchiffrement");
        UncryptRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UncryptRBActionPerformed(evt);
            }
        });
        ModePanel.add(UncryptRB);

        OptionPanel.add(ModePanel);

        TypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Méthode"));
        TypePanel.setLayout(new javax.swing.BoxLayout(TypePanel, javax.swing.BoxLayout.Y_AXIS));

        MethodBG.add(CaesarRB);
        CaesarRB.setSelected(true);
        CaesarRB.setText("Caesar");
        CaesarRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CaesarRBActionPerformed(evt);
            }
        });
        TypePanel.add(CaesarRB);

        MethodBG.add(AlbertiRB);
        AlbertiRB.setText("Alberti");
        AlbertiRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlbertiRBActionPerformed(evt);
            }
        });
        TypePanel.add(AlbertiRB);

        MethodBG.add(HillRB);
        HillRB.setText("Hill");
        HillRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HillRBActionPerformed(evt);
            }
        });
        TypePanel.add(HillRB);

        OptionPanel.add(TypePanel);

        KeyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Clé"));
        KeyPanel.setMaximumSize(new java.awt.Dimension(400, 400));
        KeyPanel.setPreferredSize(new java.awt.Dimension(200, 100));
        KeyPanel.setLayout(new java.awt.CardLayout());

        CaesarPanel.setLayout(new javax.swing.BoxLayout(CaesarPanel, javax.swing.BoxLayout.LINE_AXIS));

        DecalageLabel.setText("Décalage :");
        CaesarPanel.add(DecalageLabel);

        DecalageSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 26, 1));
        DecalageSpinner.setToolTipText("");
        DecalageSpinner.setMaximumSize(new java.awt.Dimension(50, 22));
        DecalageSpinner.setMinimumSize(new java.awt.Dimension(50, 22));
        DecalageSpinner.setPreferredSize(new java.awt.Dimension(120, 22));
        CaesarPanel.add(DecalageSpinner);

        KeyPanel.add(CaesarPanel, "CaesarCard");

        AlbertiPanel.setLayout(new java.awt.GridLayout(2, 2, 5, 5));

        CalageLabel.setText("Calage : ");
        AlbertiPanel.add(CalageLabel);

        CalageTF.setMaximumSize(new java.awt.Dimension(100, 22));
        CalageTF.setMinimumSize(new java.awt.Dimension(100, 22));
        CalageTF.setName(""); // NOI18N
        CalageTF.setPreferredSize(new java.awt.Dimension(100, 22));
        CalageTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalageTFActionPerformed(evt);
            }
        });
        AlbertiPanel.add(CalageTF);

        FrequenceLabel.setText("Fréquence : ");
        AlbertiPanel.add(FrequenceLabel);

        FrequenceSpinner.setMaximumSize(new java.awt.Dimension(100, 22));
        FrequenceSpinner.setMinimumSize(new java.awt.Dimension(100, 22));
        FrequenceSpinner.setPreferredSize(new java.awt.Dimension(100, 22));
        AlbertiPanel.add(FrequenceSpinner);

        KeyPanel.add(AlbertiPanel, "AlbertiCard");

        HillPanel.setLayout(new java.awt.GridLayout(1, 0));

        MatricePanel.setLayout(new java.awt.GridLayout(2, 2, 5, 5));

        Matrice00Spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 26, 1));
        MatricePanel.add(Matrice00Spinner);

        Matrice01Spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 26, 1));
        MatricePanel.add(Matrice01Spinner);

        Matrice10Spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 26, 1));
        MatricePanel.add(Matrice10Spinner);

        Matrice11Spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 26, 1));
        MatricePanel.add(Matrice11Spinner);

        HillPanel.add(MatricePanel);

        KeyPanel.add(HillPanel, "HillCard");

        OptionPanel.add(KeyPanel);

        GoButton.setText("Go");
        GoButton.setMaximumSize(new java.awt.Dimension(100, 25));
        GoButton.setMinimumSize(new java.awt.Dimension(100, 25));
        GoButton.setPreferredSize(new java.awt.Dimension(100, 25));
        GoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoButtonActionPerformed(evt);
            }
        });
        OptionPanel.add(GoButton);

        PanelAction.setLayout(new javax.swing.BoxLayout(PanelAction, javax.swing.BoxLayout.Y_AXIS));

        GenerateKeyBt.setText("Générer Clé");
        GenerateKeyBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateKeyBtActionPerformed(evt);
            }
        });
        PanelAction.add(GenerateKeyBt);

        OptionPanel.add(PanelAction);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        getContentPane().add(OptionPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenButtonActionPerformed
        
        SimpleAttributeSet txtAttribute = new SimpleAttributeSet();
        
        final JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = chooser.showOpenDialog(this);
        InputTP.setText("");
        
        if(returnVal == JFileChooser.APPROVE_OPTION){
            StyledDocument docInput = InputTP.getStyledDocument();
            try (BufferedReader br = new BufferedReader(new FileReader(chooser.getSelectedFile()))) {
                String line;
                while ((line = br.readLine()) != null) {
                    docInput.insertString(docInput.getLength(),line+'\n',txtAttribute);
                }
             } catch (FileNotFoundException ex) {
                Logger.getLogger(SecureDocumentsGenerator.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(SecureDocumentsGenerator.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadLocationException ex) {
                Logger.getLogger(SecureDocumentsGenerator.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_OpenButtonActionPerformed

    private void UncryptRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UncryptRBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UncryptRBActionPerformed

    private void CaesarRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CaesarRBActionPerformed
        CardLayout cardLayout = (CardLayout) KeyPanel.getLayout();
        if(CaesarRB.isSelected()){
            cardLayout.show(KeyPanel,"CaesarCard");
            
            chiffrement = (Chiffrement) CryptoManager.newInstance("TriumviratPrior");
        }
    }//GEN-LAST:event_CaesarRBActionPerformed

    private void CalageTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalageTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CalageTFActionPerformed

    private void AlbertiRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlbertiRBActionPerformed
        CardLayout cardLayout = (CardLayout) KeyPanel.getLayout();
        if(AlbertiRB.isSelected()){  
            cardLayout.show(KeyPanel,"AlbertiCard");
            
            chiffrement = (Chiffrement) CryptoManager.newInstance("LeonBattistaAlberti");
        }
    }//GEN-LAST:event_AlbertiRBActionPerformed

    private void HillRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HillRBActionPerformed
         CardLayout cardLayout = (CardLayout) KeyPanel.getLayout();
        if(HillRB.isSelected()){
            cardLayout.show(KeyPanel,"HillCard");
            Matrice00Spinner.setValue(0);
            Matrice01Spinner.setValue(0);
            Matrice10Spinner.setValue(0);
            Matrice11Spinner.setValue(0);
            
            chiffrement = (Chiffrement) CryptoManager.newInstance("LinearAlgebra");
        }
    }//GEN-LAST:event_HillRBActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        SimpleAttributeSet txtAttribute = new SimpleAttributeSet();
        
        final JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showSaveDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION){
            BufferedWriter writer = null;
            try {
                File fileToSave = chooser.getSelectedFile();
                System.out.println("Dossier = " + fileToSave.getAbsolutePath());
                writer = new BufferedWriter(new FileWriter(fileToSave));
                writer.write(OutputTP.getText());
            } catch (IOException ex) {
                Logger.getLogger(SecureDocumentsGenerator.class.getName()).log(Level.SEVERE, null, ex);
            } finally { 
               try {
                    writer.close();
                } catch (IOException ex) {
                    Logger.getLogger(SecureDocumentsGenerator.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void GenerateKeyBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateKeyBtActionPerformed
        cle = CryptoManager.genereCle(chiffrement.getProvider());
         
        if(CaesarRB.isSelected())
        {
            CleCaesar cc = (CleCaesar) cle;
            int decalage = (int)DecalageSpinner.getValue();
            
            if( decalage == 0)
                DecalageSpinner.setValue(cc.getDecalage());
            else
                cc.setDecalage(decalage);
        }
        else if(AlbertiRB.isSelected())
        {
            ClePolyAlberti cpa = (ClePolyAlberti) cle;
            String text = CalageTF.getText();
            int freq = (int)FrequenceSpinner.getValue();
            
            if(text.isEmpty())
                CalageTF.setText(cpa.getCalage());
            else
                cpa.setCalage(text);
            if(freq==0)
                FrequenceSpinner.setValue(cpa.getFrequence());
            else
                cpa.setFrequence(freq);
        }
        else if(HillRB.isSelected())
        {
            MatrixKey mk = (MatrixKey) cle;
            int m00= (int)Matrice00Spinner.getValue();
            int m01= (int)Matrice01Spinner.getValue();
            int m10= (int)Matrice10Spinner.getValue();
            int m11= (int)Matrice11Spinner.getValue();
            
            if(m00==0 && m01==0 && m10==0 && m11==0)
            {
                int[][] matrice = mk.getMatrice();
                Matrice00Spinner.setValue(matrice[0][0]);
                Matrice01Spinner.setValue(matrice[0][1]);
                Matrice10Spinner.setValue(matrice[1][0]);
                Matrice11Spinner.setValue(matrice[1][1]);
            }
            else 
            {
                int[][] matr = new int[2][2];
                matr[0][0]=m00;
                matr[0][1]=m01;
                matr[1][0]=m10;
                matr[1][1]=m11;
                mk.setMatrice(matr);
            }   
        }
        
        chiffrement.init(cle);
    }//GEN-LAST:event_GenerateKeyBtActionPerformed

    private void GoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoButtonActionPerformed
        if(EncryptRB.isSelected())
            OutputTP.setText(chiffrement.crypte(InputTP.getText()));
        else
            OutputTP.setText(chiffrement.decrypte(InputTP.getText()));
    }//GEN-LAST:event_GoButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SecureDocumentsGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SecureDocumentsGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SecureDocumentsGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SecureDocumentsGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SecureDocumentsGenerator().setVisible(true);
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup ActioBG;
    private javax.swing.JPanel AlbertiPanel;
    private javax.swing.JRadioButton AlbertiRB;
    private javax.swing.JPanel CaesarPanel;
    private javax.swing.JRadioButton CaesarRB;
    private javax.swing.JLabel CalageLabel;
    private javax.swing.JTextField CalageTF;
    private javax.swing.JLabel DecalageLabel;
    private javax.swing.JSpinner DecalageSpinner;
    private javax.swing.JRadioButton EncryptRB;
    private javax.swing.JLabel FrequenceLabel;
    private javax.swing.JSpinner FrequenceSpinner;
    private javax.swing.JButton GenerateKeyBt;
    private javax.swing.JButton GoButton;
    private javax.swing.JPanel HillPanel;
    private javax.swing.JRadioButton HillRB;
    private javax.swing.JTextPane InputTP;
    private javax.swing.JPanel KeyPanel;
    private javax.swing.JSpinner Matrice00Spinner;
    private javax.swing.JSpinner Matrice01Spinner;
    private javax.swing.JSpinner Matrice10Spinner;
    private javax.swing.JSpinner Matrice11Spinner;
    private javax.swing.JPanel MatricePanel;
    private javax.swing.ButtonGroup MethodBG;
    private javax.swing.JPanel ModePanel;
    private javax.swing.JButton OpenButton;
    private javax.swing.JPanel OptionPanel;
    private javax.swing.JTextPane OutputTP;
    private javax.swing.JPanel PanelAction;
    private javax.swing.JButton SaveButton;
    private javax.swing.JPanel TypePanel;
    private javax.swing.JRadioButton UncryptRB;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
